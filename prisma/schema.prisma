generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  bio           String?        @default("")
  role          String         @default("user")
  password      String?
  balance       Int            @default(0) // 残高（将来的な拡張用）
  accounts      Account[]
  Article       Article[]
  sessions      Session[]
  subscriptions Subscription[] // 購読履歴
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  published Boolean  @default(true)
  imageUrl  String?
  summary   String?
  tags      String[]
  authorId  String
  updatedAt DateTime @updatedAt

  // 有料記事関連フィールド
  isPremium Boolean @default(false) // 有料記事フラグ
  price     Int? // 価格（円）

  author        User           @relation(fields: [authorId], references: [id])
  subscriptions Subscription[] // 購読履歴
}

// 購読モデル（新規追加）
model Subscription {
  id                    String   @id @default(cuid())
  userId                String
  articleId             String
  amount                Int // 支払い金額（円）
  status                String // "pending", "completed", "failed", "refunded"
  stripeSessionId       String? // StripeセッションID
  stripePaymentIntentId String? // Stripe決済ID
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  article Article @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId]) // 同じユーザーが同じ記事を重複購読できないようにする
}
